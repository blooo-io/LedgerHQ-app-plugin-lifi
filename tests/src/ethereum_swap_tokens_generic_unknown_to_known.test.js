import { processTest, populateTransaction } from "./test.fixture";

const contractName = "LiFiDiamond";

const testLabel = "swap_tokens_generic_unknown_to_known"; // <= Name of the test
const testDirSuffix = "swap_tokens_generic_unknown_to_known"; // <= directory to compare device snapshots to
const testNetwork = "ethereum";
const signedPlugin = false;

const contractAddr = "0x362fA9D0bCa5D19f743Db50738345ce2b40eC99f";
const chainID = 1;

// From : https://etherscan.io/tx/0xe5b95f4f6eabed2b1b180b8684f53932d034696f9616610863f7cc4308dd95a2
const inputData = "0xa4baa10c00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000180758fae452c91d35cd9d24c9d7f255f11bac86eb01bdf382e4f97760b1ea421de000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b4328c127b85369d9f82ca0503b000d09cf918000000000000000000000000048c276e8d03813224bb1e55f953adb6d02fd3e020000000000000000000000002a4fc55ee2f51f7a1379c628feb599eab9aea91400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000f82b9ae53d790ffe000000000000000000000000000000000000000000000000000000000000000005727562696300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a2398842f37465f89540430bdc00219fa9e4d28a000000000000000000000000cb859ea579b28e02b87a1fde08d087ab9dbe51490000000000000000000000007b4328c127b85369d9f82ca0503b000d09cf918000000000000000000000000048c276e8d03813224bb1e55f953adb6d02fd3e020000000000000000000000000000000000000000000000f82b9ae53d790ffe0000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000003a47617b3890000000000000000000000007b4328c127b85369d9f82ca0503b000d09cf918000000000000000000000000048c276e8d03813224bb1e55f953adb6d02fd3e020000000000000000000000000000000000000000000000f82b9ae53d790ffe0000000000000000000000000000000000000000000106180b24dbce0b9fcac29d000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000063259f72000000000000000000000000000000000000000000000000000000000000000200000000000000000000000050d148d0908c602a56884b8628a36470a875eeb200000000000000000000000050d148d0908c602a56884b8628a36470a875eeb200000000000000000000000000000000000000000000000000000000000000020000000000000000000000008a633d6744d674c7c4f70020b6dacdd0bae48a32000000000000000000000000df60e6416fcf8c955fddf01148753a911f7a590500000000000000000000000000000000000000000000000000000000000000030000000000000000000000008a633d6744d674c7c4f70020b6dacdd0bae48a32000000000000000000000000df60e6416fcf8c955fddf01148753a911f7a5905000000000000000000000000362fa9d0bca5d19f743db50738345ce2b40ec99f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000";

// Create serializedTx and remove the "0x" prefix
const serializedTx = populateTransaction(contractAddr, inputData, chainID);

const devices = [
    {
        name: "nanos",
        label: "Nano S",
        steps: 6, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanox",
        label: "Nano X",
        steps: 6, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanosp",
        label: "Nano S+",
        steps: 6, // <= Define the number of steps for this test case and this device
    }
];

devices.forEach((device) =>
    processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx, testNetwork)
);
