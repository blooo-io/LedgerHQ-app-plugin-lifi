import { processTest, populateTransaction } from "../test.fixture";

const contractName = "LiFiDiamond";

const testLabel = "SBTVNXTP_unknown_token_known_chain_calldata_true"; // <= Name of the test
const testDirSuffix = "SBTVNXTP_unknown_token_known_chain_calldata_true"; // <= directory to compare device snapshots to
const testNetwork = "bsc";
const signedPlugin = false;

const contractAddr = "0x1231deb6f5749ef6ce6943a275a1d3e7486f4eae";
const chainID = 56;

// From : https://bscscan.com/tx/0xcd0cd6640d0bbc4faa2e1ba9406078fd6f3067781d5862db646741bac7f921cd
// With has call data: from 0x00 to 0x01
// With token address: from 0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d to 0x8ac76a51cc950d9822d68b83fe1ad97b32cd580a
const inputData = "0xc9fb76b100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200360b7a2b3d84f1adbb736b2f1c66c2ce21cfa36cb0f1ef2d7af3b5ffce3eae1c000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000003110a855333bfb922aecb1b3542ba2fde28d204f0000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580a0000000000000000000000004a3cd1e36091a66cf6dea0a77dad564ffc8547a100000000000000000000000000000000000000000000000029a2241af62c00000000000000000000000000000000000000000000000000000000000000000089000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000007636f6e6e65787400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e626c6f636b77616c6c65742e696f0000000000000000000000000000000000000000000000000000000000006090de2ec76eb1dc3b5d632734415c93c44fd113000000000000000000000000997f29174a766a1da04cf77d135d59dd12fb54d1000000000000000000000000a5b725e6e87fcd5eede4a6b7c5a47e4090f492390000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae0000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000004a3cd1e36091a66cf6dea0a77dad564ffc8547a10000000000000000000000004a3cd1e36091a66cf6dea0a77dad564ffc8547a1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000089c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47070d3a385425bacd9c8cac85a7014ed624d9cad32a2b78d3452ff2ca3f5fabed60000000000000000000000000000000000000000000000000000000063711ee80000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000997f29174a766a1da04cf77d135d59dd12fb54d1000000000000000000000000a5b725e6e87fcd5eede4a6b7c5a47e4090f492390000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae00000000000000000000000000000000000000000000000000000000000000380000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d00000000000000000000000000000000000000000000000029a2241af62c000000000000000000000000000000000000000000000000000000000000000000890000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000000000000000000000000000000286d450000000000000000000000004a3cd1e36091a66cf6dea0a77dad564ffc8547a170d3a385425bacd9c8cac85a7014ed624d9cad32a2b78d3452ff2ca3f5fabed60000000000000000000000000000000000000000000000000000000063711edec5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000002a9ea5e8cddf40730f4f4f839f673a51600c314e0000000000000000000000006090de2ec76eb1dc3b5d632734415c93c44fd11300000000000000000000000000000000000000000000000000000000636d2b8b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041b1e17a828b3665276cf43440601c934ab39f962b863b80ae26d192118c89c9b04197b4cfec63c8f3a0086b014470d586e37e92f16779e9461774fde272beeb691b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";


// Create serializedTx and remove the "0x" prefix
const serializedTx = populateTransaction(contractAddr, inputData, chainID);

const devices = [
    {
        name: "nanos",
        label: "Nano S",
        steps: 13, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanox",
        label: "Nano X",
        steps: 10, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanosp",
        label: "Nano S+",
        steps: 10, // <= Define the number of steps for this test case and this device
    }
];

devices.forEach((device) =>
    processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx, testNetwork)
);
