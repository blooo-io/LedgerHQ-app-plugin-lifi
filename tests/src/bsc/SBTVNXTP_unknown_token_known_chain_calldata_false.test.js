import { processTest, populateTransaction } from "../test.fixture";

const contractName = "LiFiDiamond";

const testLabel = "SBTVNXTP_unknown_token_known_chain_calldata_false"; // <= Name of the test
const testDirSuffix = "SBTVNXTP_unknown_token_known_chain_calldata_false"; // <= directory to compare device snapshots to
const testNetwork = "bsc";
const signedPlugin = false;

const contractAddr = "0x362fa9d0bca5d19f743db50738345ce2b40ec99f";
const chainID = 56;

// From : https://bscscan.com/tx/0x189239cb891e100a1b594a14e37f1534743c90c78fb2154f5666585768cd5f55
// With token address altered : from 0x55d398326f99059ff775485246999027b3197955 to 0x55d398326f99059ff77500000000000000000000

const inputData = "0x7d7aecd300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000180e0efc2069185f67fc24334d374b8af56e697b4eb4183adf4ef2d70ded1bcb7060000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055d398326f99059ff77500000000000000000000000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000008e2f7d5aaae5abbd5052acb74019b9b11cb743490000000000000000000000000000000000000000000000000000000000000089000000000000000000000000000000000000000000000012a4640c8232c18000000000000000000000000000000000000000000000000000000000000000000e7472616e73666572746f2e78797a0000000000000000000000000000000000000000000000000000000000006090de2ec76eb1dc3b5d632734415c93c44fd113000000000000000000000000997f29174a766a1da04cf77d135d59dd12fb54d10000000000000000000000006db8506a7454c5a83b9e68dfc89fd7413ce97a5d000000000000000000000000362fa9d0bca5d19f743db50738345ce2b40ec99f00000000000000000000000055d398326f99059ff77500000000000000000000000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000008e2f7d5aaae5abbd5052acb74019b9b11cb743490000000000000000000000008e2f7d5aaae5abbd5052acb74019b9b11cb74349000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000089c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4700c8e85e20dd8bb19ffe2575c4c6b9c478914e21dea4439d0f183f2af5ffed840000000000000000000000000000000000000000000000012a4640c8232c180000000000000000000000000000000000000000000000000000000000063388e9d00000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000997f29174a766a1da04cf77d135d59dd12fb54d10000000000000000000000006db8506a7454c5a83b9e68dfc89fd7413ce97a5d000000000000000000000000362fa9d0bca5d19f743db50738345ce2b40ec99f000000000000000000000000000000000000000000000000000000000000003800000000000000000000000055d398326f99059ff77500000000000000000000000000000000000000000000000000000000000000000012a4640c8232c180000000000000000000000000000000000000000000000000000000000000000089000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000000000000000000000000000000000000147838bf0000000000000000000000008e2f7d5aaae5abbd5052acb74019b9b11cb743490c8e85e20dd8bb19ffe2575c4c6b9c478914e21dea4439d0f183f2af5ffed8400000000000000000000000000000000000000000000000000000000063388e97c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000002a9ea5e8cddf40730f4f4f839f673a51600c314e0000000000000000000000006090de2ec76eb1dc3b5d632734415c93c44fd1130000000000000000000000000000000000000000000000000000000063349b43000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000413068328794890ef0cbba9d215cf4d7695e977ab000141b36e3a872dd182c109200edc6bf5d25b2e880577fdd90961ed7646d3505f28d98e90e2e753ddb1545911b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";


// Create serializedTx and remove the "0x" prefix
const serializedTx = populateTransaction(contractAddr, inputData, chainID);

const devices = [
    {
        name: "nanos",
        label: "Nano S",
        steps: 12, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanox",
        label: "Nano X",
        steps: 9, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanosp",
        label: "Nano S+",
        steps: 9, // <= Define the number of steps for this test case and this device
    }
];

devices.forEach((device) =>
    processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx, testNetwork)
);
