import { processTest, populateTransaction } from "../test.fixture";

const contractName = "LiFiDiamond";

const testLabel = "SBTVNXTP_unknown_token_unknown_chain_calldata_false"; // <= Name of the test
const testDirSuffix = "SBTVNXTP_unknown_token_unknown_chain_calldata_false"; // <= directory to compare device snapshots to
const testNetwork = "polygon";
const signedPlugin = false;

const contractAddr = "0x362fA9D0bCa5D19f743Db50738345ce2b40eC99f";
const chainID = 137;

// From : https://polygonscan.com/tx/0x7e1581f8ff03b1f2a1f372f52370d8eb8e732d79dedac50cba7003099f2e5e0e
// With token address altered : from 0x8f3cf7ad23cd3cadbd9735aff958023239c6a063 to 0x8f3cf7ad23cd3cadbd9000000000000000000000
const inputData = "0x7d7aecd3000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001808c10731a646d4ab4f9dd5885c4a7b493a0a340a66ff16cc8a24a5afacce9b0dd000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008f3cf7ad23cd3cadbd90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e80a6a7b4fdadf0aa59f3f669a8d394d1d4da86b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000002062ab00000b6271b0000000000000000000000000000000000000000000000000000000000000000e7472616e73666572746f2e78797a000000000000000000000000000000000000000000000000000000000000115909bdcbab21954beb4ab65fc2abee9866fa93000000000000000000000000997f29174a766a1da04cf77d135d59dd12fb54d100000000000000000000000095829c9acfecaec0ee594a377311b0937c4a2882000000000000000000000000362fa9d0bca5d19f743db50738345ce2b40ec99f0000000000000000000000008f3cf7ad23cd3cadbd90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e80a6a7b4fdadf0aa59f3f669a8d394d1d4da86b000000000000000000000000e80a6a7b4fdadf0aa59f3f669a8d394d1d4da86b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000890000000000000000000000000000000000000000000000000000000000000064c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470bc1a8649a1e376e97ead0cbf444c72a75a6c6740dc6b937003631f39b3f1d09800000000000000000000000000000000000000000000002062ab00000b6271b0000000000000000000000000000000000000000000000000000000006316968f00000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000997f29174a766a1da04cf77d135d59dd12fb54d100000000000000000000000095829c9acfecaec0ee594a377311b0937c4a2882000000000000000000000000362fa9d0bca5d19f743db50738345ce2b40ec99f00000000000000000000000000000000000000000000000000000000000000890000000000000000000000008f3cf7ad23cd3cadbd900000000000000000000000000000000000000000000000000000000000000000002062ab00000b6271b0000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000205e73994abfd9d3f9000000000000000000000000e80a6a7b4fdadf0aa59f3f669a8d394d1d4da86bbc1a8649a1e376e97ead0cbf444c72a75a6c6740dc6b937003631f39b3f1d0980000000000000000000000000000000000000000000000000000000063169688c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000006090de2ec76eb1dc3b5d632734415c93c44fd113000000000000000000000000115909bdcbab21954beb4ab65fc2abee9866fa93000000000000000000000000000000000000000000000000000000006312a33500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041b593b214feac903f710b96d127750ab3e9471a00e356d39100de30a1946694aa6ccf48cafca0594fbbe73d25539ed73e1374dd53b182e0dcfaa91174645d6c1d1c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";


// Create serializedTx and remove the "0x" prefix
const serializedTx = populateTransaction(contractAddr, inputData, chainID);

const devices = [
    {
        name: "nanos",
        label: "Nano S",
        steps: 13, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanox",
        label: "Nano X",
        steps: 9, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanosp",
        label: "Nano S+",
        steps: 9, // <= Define the number of steps for this test case and this device
    }
];

devices.forEach((device) =>
    processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx, testNetwork)
);
