import { processTest, populateTransaction } from "../test.fixture";

const contractName = "LiFiDiamond";

const testLabel = "SBTVNXTP_unknown_token_unknown_chain_calldata_false"; // <= Name of the test
const testDirSuffix = "SBTVNXTP_unknown_token_unknown_chain_calldata_false"; // <= directory to compare device snapshots to
const testNetwork = "polygon";
const signedPlugin = false;

const contractAddr = "0x1231deb6f5749ef6ce6943a275a1d3e7486f4eae";
const chainID = 137;

// From : https://polygonscan.com/tx/0x454789777e0985016e4a0057b7aa1b02e525b6dbf6f332b2b8226747b70230e6
// With destination chain altered : from 0x0505 to 0x0502
// With token address altered : from 0x2791bca1f2de4661ed88a30c99a7a9449aa84174 to 0x2791bca1f2de4661ed88a30c99a7a9449aa84173
const inputData = "0xc9fb76b1000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002000f28844e29d7c36674672eda4e871346179a604b4d9a92d403728ea3eba1db4f0000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000010000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841730000000000000000000000004d55904bb86b962529ae271c806b8f28616a308f000000000000000000000000000000000000000000000000000000003ab8bc140000000000000000000000000000000000000000000000000000000000000502000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007636f6e6e65787400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e7472616e73666572746f2e78797a000000000000000000000000000000000000000000000000000000000000373ba9aa0f48b27a977f73423039e6de341a0c7c000000000000000000000000997f29174a766a1da04cf77d135d59dd12fb54d100000000000000000000000092495600b72ef0e1fa22453b58938a9af49918ae0000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000e3f5a90f9cb311505cd691a46596599aa1a0ad7d0000000000000000000000004d55904bb86b962529ae271c806b8f28616a308f0000000000000000000000004d55904bb86b962529ae271c806b8f28616a308f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000890000000000000000000000000000000000000000000000000000000000000505c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470b9154f4423d794d20d204eb8979c025eafe4648deceb227f4e069382bcaf0688000000000000000000000000000000000000000000000000000000006374da630000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000997f29174a766a1da04cf77d135d59dd12fb54d100000000000000000000000092495600b72ef0e1fa22453b58938a9af49918ae0000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae00000000000000000000000000000000000000000000000000000000000000890000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000000000000000000000000000000000003ab8bc140000000000000000000000000000000000000000000000000000000000000505000000000000000000000000e3f5a90f9cb311505cd691a46596599aa1a0ad7d000000000000000000000000000000000000000000000000000000003ab1133d0000000000000000000000004d55904bb86b962529ae271c806b8f28616a308fb9154f4423d794d20d204eb8979c025eafe4648deceb227f4e069382bcaf0688000000000000000000000000000000000000000000000000000000006374da5ac5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000006090de2ec76eb1dc3b5d632734415c93c44fd113000000000000000000000000373ba9aa0f48b27a977f73423039e6de341a0c7c000000000000000000000000000000000000000000000000000000006370e709000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000410a9d2c34d96133d99a8bc06b1087df56fc86c8ee71c24738f676f1ccd2e501514032bfe4c9a598d93931fd9cf5c5e23841c679fb342aaa4d3a6ac91440b00d0f1c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";


// Create serializedTx and remove the "0x" prefix
const serializedTx = populateTransaction(contractAddr, inputData, chainID);

const devices = [
    {
        name: "nanos",
        label: "Nano S",
        steps: 13, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanox",
        label: "Nano X",
        steps: 10, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanosp",
        label: "Nano S+",
        steps: 10, // <= Define the number of steps for this test case and this device
    }
];

devices.forEach((device) =>
    processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx, testNetwork)
);
