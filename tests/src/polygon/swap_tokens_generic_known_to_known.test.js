import { processTest, populateTransaction } from "../test.fixture";

const contractName = "LiFiDiamond";

const testLabel = "swap_tokens_geneneric_known_to_known"; // <= Name of the test
const testDirSuffix = "swap_tokens_generic_known_to_known"; // <= directory to compare device snapshots to
const testNetwork = "polygon";
const signedPlugin = false;

const contractAddr = "0x362fa9d0bca5d19f743db50738345ce2b40ec99f";
const chainID = 137;

// From https://polygonscan.com/tx/0xa3c3f7c699cf4121be37cf6dbb6a0a291c30e7180ca2c7a222a6709eef7f2603
const inputData = "0xa4baa10c00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000180da8057f73b394cd286a98e84b430b8f58ea764b3cf4fd55514bfa0413288d880000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000bbba073c31bf03b8acf7c28ef0738decf3695683000000000000000000000000d8b610fe54cb1cde5d06f6a1d40bb007c80a91cb00000000000000000000000000000000000000000000000000000000000000890000000000000000000000000000000000000000000000000000000002625a00000000000000000000000000000000000000000000000000000000000000000e7472616e73666572746f2e78797a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254fb6c44bac0bed2854e76f90643097d0000000000000000000000001111111254fb6c44bac0bed2854e76f90643097d0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000bbba073c31bf03b8acf7c28ef0738decf36956830000000000000000000000000000000000000000000000000000000002625a0000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000007487c02520000000000000000000000000013927a60c7bf4d3d00e3c1593e0ec713e35d2106000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001800000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000bbba073c31bf03b8acf7c28ef0738decf369568300000000000000000000000013927a60c7bf4d3d00e3c1593e0ec713e35d2106000000000000000000000000362fa9d0bca5d19f743db50738345ce2b40ec99f0000000000000000000000000000000000000000000000000000000002625a000000000000000000000000000000000000000000000000027567ff3f74f755c800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000420800000000000000000000000a374094527e1673a86de625aa59517c5de346d32000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000104128acb0800000000000000000000000013927a60c7bf4d3d00e3c1593e0ec713e35d210600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002625a00000000000000000000000000000000000000000000000ebf6db34dc62ebe89ab00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000018414284aab000000000000000000000000000000000000000000000000000000000000008080000000000000000000000000000000000000000000000000000000000000440000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000032000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000064d1660f990000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000369582d2010b6ed950b571f4101e3bb9b554876f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a4b757fed6000000000000000000000000369582d2010b6ed950b571f4101e3bb9b554876f0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000bbba073c31bf03b8acf7c28ef0738decf36956830000000000000000002dc6c01111111254fb6c44bac0bed2854e76f90643097d0000000000000000000000000000000000000000000000027567ff3f74f755c8000000000000000000000000000000000000000000000000000000002e9b3012000000000000000000000000000000000000000000000000";

// Create serializedTx and remove the "0x" prefix
const serializedTx = populateTransaction(contractAddr, inputData, chainID);

const devices = [
    {
        name: "nanos",
        label: "Nano S",
        steps: 6, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanox",
        label: "Nano X",
        steps: 6, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanosp",
        label: "Nano S+",
        steps: 6, // <= Define the number of steps for this test case and this device
    }
];

devices.forEach((device) =>
    processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx, testNetwork)
);
