import { processTest, populateTransaction } from "../test.fixture";

const contractName = "LiFiDiamond";

const testLabel = "SBTVNXTP_known_token_unknown_chain_calldata_true"; // <= Name of the test
const testDirSuffix = "SBTVNXTP_known_token_unknown_chain_calldata_true"; // <= directory to compare device snapshots to
const testNetwork = "ethereum";
const signedPlugin = false;

const contractAddr = "0x1231deb6f5749ef6ce6943a275a1d3e7486f4eae";
const chainID = 1;

// From : https://etherscan.io/tx/0xeb9b6a93f9d15afe85a8b4865a70e767f9780da3a09a80c6dc64baeae6a1fd1d
// With hasCallData altered : from 0 to 1
const inputData = "0xc9fb76b100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200fb18a4c287ff023c1466aced53640217b47bebe243462c6f8fd88127b7554125000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000083060237b2f45fd63db4b4ad569cb45d38c2401f00000000000000000000000000000000000000000000000006a94d74f43000000000000000000000000000000000000000000000000000000000000000000089000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000007636f6e6e65787400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e7472616e73666572746f2e78797a0000000000000000000000000000000000000000000000000000000000006090de2ec76eb1dc3b5d632734415c93c44fd113000000000000000000000000997f29174a766a1da04cf77d135d59dd12fb54d1000000000000000000000000826ccd5ed8ca665555fe45a4f045b61516b241c00000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae00000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000083060237b2f45fd63db4b4ad569cb45d38c2401f00000000000000000000000083060237b2f45fd63db4b4ad569cb45d38c2401f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000089c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470335cc7cd5431cf1ddfda323a39c296b8f59e468ea2b5ce0f65db58c2f3f461f5000000000000000000000000000000000000000000000000000000006376864f0000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000997f29174a766a1da04cf77d135d59dd12fb54d1000000000000000000000000826ccd5ed8ca665555fe45a4f045b61516b241c00000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006a94d74f430000000000000000000000000000000000000000000000000000000000000000000890000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000006985b626e3258b800000000000000000000000083060237b2f45fd63db4b4ad569cb45d38c2401f335cc7cd5431cf1ddfda323a39c296b8f59e468ea2b5ce0f65db58c2f3f461f50000000000000000000000000000000000000000000000000000000063768645c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024000000000000000000000000031efc4aeaa7c39e54a33fdc3c46ee2bd70ae0a090000000000000000000000006090de2ec76eb1dc3b5d632734415c93c44fd11300000000000000000000000000000000000000000000000000000000637292f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000413068673812ac770ee6ba02142c3815559f501eb996cf8ebd51b8f185f5a22bb1254861284226730d63322da74f93d2bf45f8eeafa88a3fa89fb98461cf08160d1c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";


// Create serializedTx and remove the "0x" prefix
const serializedTx = populateTransaction(contractAddr, inputData, chainID);

const devices = [
    {
        name: "nanos",
        label: "Nano S",
        steps: 11, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanox",
        label: "Nano X",
        steps: 8, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanosp",
        label: "Nano S+",
        steps: 8, // <= Define the number of steps for this test case and this device
    }
];

devices.forEach((device) =>
    processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx, testNetwork)
);
